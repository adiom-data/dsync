// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"

	iface "github.com/adiom-data/dsync/protocol/iface"
	mock "github.com/stretchr/testify/mock"
)

// ConnectorICoordinatorSignal is an autogenerated mock type for the ConnectorICoordinatorSignal type
type ConnectorICoordinatorSignal struct {
	mock.Mock
}

// GetConnectorStatus provides a mock function with given fields: flowId
func (_m *ConnectorICoordinatorSignal) GetConnectorStatus(flowId iface.FlowID) iface.ConnectorStatus {
	ret := _m.Called(flowId)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorStatus")
	}

	var r0 iface.ConnectorStatus
	if rf, ok := ret.Get(0).(func(iface.FlowID) iface.ConnectorStatus); ok {
		r0 = rf(flowId)
	} else {
		r0 = ret.Get(0).(iface.ConnectorStatus)
	}

	return r0
}

// IntegrityCheck provides a mock function with given fields: ctx, task
func (_m *ConnectorICoordinatorSignal) IntegrityCheck(ctx context.Context, task iface.IntegrityCheckQuery) (iface.ConnectorDataIntegrityCheckResult, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for IntegrityCheck")
	}

	var r0 iface.ConnectorDataIntegrityCheckResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iface.IntegrityCheckQuery) (iface.ConnectorDataIntegrityCheckResult, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iface.IntegrityCheckQuery) iface.ConnectorDataIntegrityCheckResult); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Get(0).(iface.ConnectorDataIntegrityCheckResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, iface.IntegrityCheckQuery) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interrupt provides a mock function with given fields: flowId
func (_m *ConnectorICoordinatorSignal) Interrupt(flowId iface.FlowID) error {
	ret := _m.Called(flowId)

	if len(ret) == 0 {
		panic("no return value specified for Interrupt")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID) error); ok {
		r0 = rf(flowId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestCreateReadPlan provides a mock function with given fields: flowId, options
func (_m *ConnectorICoordinatorSignal) RequestCreateReadPlan(flowId iface.FlowID, options iface.ConnectorOptions) error {
	ret := _m.Called(flowId, options)

	if len(ret) == 0 {
		panic("no return value specified for RequestCreateReadPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID, iface.ConnectorOptions) error); ok {
		r0 = rf(flowId, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetParameters provides a mock function with given fields: flowId, reqCap
func (_m *ConnectorICoordinatorSignal) SetParameters(flowId iface.FlowID, reqCap iface.ConnectorCapabilities) {
	_m.Called(flowId, reqCap)
}

// StartReadToChannel provides a mock function with given fields: flowId, options, readPlan, dataChannel
func (_m *ConnectorICoordinatorSignal) StartReadToChannel(flowId iface.FlowID, options iface.ConnectorOptions, readPlan iface.ConnectorReadPlan, dataChannel iface.DataChannelID) error {
	ret := _m.Called(flowId, options, readPlan, dataChannel)

	if len(ret) == 0 {
		panic("no return value specified for StartReadToChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID, iface.ConnectorOptions, iface.ConnectorReadPlan, iface.DataChannelID) error); ok {
		r0 = rf(flowId, options, readPlan, dataChannel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartWriteFromChannel provides a mock function with given fields: flowId, dataChannel
func (_m *ConnectorICoordinatorSignal) StartWriteFromChannel(flowId iface.FlowID, dataChannel iface.DataChannelID) error {
	ret := _m.Called(flowId, dataChannel)

	if len(ret) == 0 {
		panic("no return value specified for StartWriteFromChannel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID, iface.DataChannelID) error); ok {
		r0 = rf(flowId, dataChannel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConnectorICoordinatorSignal creates a new instance of ConnectorICoordinatorSignal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectorICoordinatorSignal(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectorICoordinatorSignal {
	mock := &ConnectorICoordinatorSignal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
