// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Statestore is an autogenerated mock type for the Statestore type
type Statestore struct {
	mock.Mock
}

// DeleteObject provides a mock function with given fields: storeName, id
func (_m *Statestore) DeleteObject(storeName string, id interface{}) error {
	ret := _m.Called(storeName, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(storeName, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PersistObject provides a mock function with given fields: storeName, id, obj
func (_m *Statestore) PersistObject(storeName string, id interface{}, obj interface{}) error {
	ret := _m.Called(storeName, id, obj)

	if len(ret) == 0 {
		panic("no return value specified for PersistObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}) error); ok {
		r0 = rf(storeName, id, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveObject provides a mock function with given fields: storeName, id, obj
func (_m *Statestore) RetrieveObject(storeName string, id interface{}, obj interface{}) error {
	ret := _m.Called(storeName, id, obj)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, interface{}) error); ok {
		r0 = rf(storeName, id, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Setup provides a mock function with given fields: ctx
func (_m *Statestore) Setup(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Teardown provides a mock function with given fields:
func (_m *Statestore) Teardown() {
	_m.Called()
}

// NewStatestore creates a new instance of Statestore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatestore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Statestore {
	mock := &Statestore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
