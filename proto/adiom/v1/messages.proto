syntax = "proto3";

package adiom.v1;
option go_package = "github.com/adiom-data/dsync/gen/adiom/v1;adiomv1";

import "google/protobuf/timestamp.proto";

message BsonValue {
    bytes data = 1;
    uint32 type = 2;
    string name = 3;
}

enum DataType {
    DATA_TYPE_UNKNOWN = 0;
    DATA_TYPE_MONGO_BSON = 1; // BSON that must have an _id field
    DATA_TYPE_JSON_ID = 2; // JSON that must have an id field
}

message UpdatesPartition {
    repeated string namespaces = 1;

    // If non empty, ensure metadata header is set "{partition_header}: {partition_value}"
    // This can be utilized so that a load balancer can perform routing based on the header
    string partition_header = 2;
    string partition_value = 3;

    bytes cursor = 4;
}

message Partition {
    string namespace = 1;

    // If non empty, ensure metadata header is set "{partition_header}: {partition_value}"
    // This can be utilized so that a load balancer can perform routing based on the header
    string partition_header = 2;
    string partition_value = 3;

    bytes cursor = 4;
    uint64 estimated_count = 5; // If non zero, provides an estimate of the number of documents
}

message Capabilities {
    message Source {
        repeated DataType supported_data_types = 1;

        // whether the StreamLSN endpoint is functional
        bool lsn_stream = 2;

        // allows requesting a plan for multiple namespaces
        // useful to support in the scenario that the underlying data source
        // allows you to listen to multiple namespaces at the same time
        bool multi_namespace_plan = 3;

        // allows requesting a plan without specifying any namespaces
        // the behavior is up to the source- usually it means all available namespaces
        bool default_plan = 4;
    }
    message Sink {
        repeated DataType supported_data_types = 1;
    }
    Source source = 1;
    Sink sink = 2;
}

message GetInfoRequest {}

message GetInfoResponse {
    string id = 1;
    string db_type = 2;
    string version = 3;
    string spec = 4;
    Capabilities capabilities = 5;
}

message GetNamespaceMetadataRequest {
    string namespace = 1;
}

message GetNamespaceMetadataResponse {
    uint64 count = 1;
}

message GeneratePlanRequest {
    // Typically accepts exactly 1 namespace, unless `multi_namespace_plan` or `default_plan` capabilities are enabled
    repeated string namespaces = 1;

    bool initial_sync = 2;
    bool updates = 3;
}

message GeneratePlanResponse {
    repeated Partition partitions = 1;
    repeated UpdatesPartition updates_partitions = 2;
}

enum UpdateType {
    UPDATE_TYPE_UNKNOWN = 0;
    UPDATE_TYPE_INSERT = 1;
    UPDATE_TYPE_UPDATE = 2;
    UPDATE_TYPE_DELETE = 3;
}

message Update {
    repeated BsonValue id = 1;
    UpdateType type = 2;
    bytes data = 3;
}

message ListDataRequest {
    Partition partition = 1; // must not be modified from the original provided plan
    DataType type = 2;
    bytes cursor = 3; // previous cursor may expire after the next cursor is returned successfully
}

message ListDataResponse {
    repeated bytes data = 1;
    bytes next_cursor = 2;
}

message WriteDataRequest {
    string namespace = 1;
    repeated bytes data = 2;
    DataType type = 3;
}

message WriteDataResponse {}

message WriteUpdatesRequest {
    string namespace = 1;
    repeated Update updates = 2;
    DataType type = 3;
}

message WriteUpdatesResponse {}

message StreamUpdatesRequest {
    repeated string namespaces = 1;
    DataType type = 2;
    bytes cursor = 3; // if present, can be used to resume the stream
}

message StreamUpdatesResponse {
    repeated Update updates = 1;
    string namespace = 2;
    bytes next_cursor = 3;
    google.protobuf.Timestamp time = 4; // if present, can be used to help detect stream latency
}

message StreamLSNRequest {
    repeated string namespaces = 1;
    bytes cursor = 2;
}

message StreamLSNResponse {
    uint64 lsn = 1;
    bytes next_cursor = 2;
}

message GetTransformInfoRequest {}

message GetTransformInfoResponse {
    message TransformInfo {
        DataType request_type = 1;
        repeated DataType response_types = 2;
    }
    repeated TransformInfo transforms = 1;
    bool use_multiple_responses = 2;
}

message GetTransformRequest {
    string namespace = 1;
    repeated Update updates = 2;
    repeated bytes data = 3;
    DataType request_type = 4;
    DataType response_type = 5;
}

message TransformResponse {
    string namespace = 1;
    repeated Update updates = 2;
    repeated bytes data = 3;
}

message GetTransformResponse {
    string namespace = 1;
    repeated Update updates = 2;
    repeated bytes data = 3;
    repeated TransformResponse responses = 4; // If `use_multiple_responses` is true, use this
}