// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: adiom/v1/vector.proto

package adiomv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/adiom-data/dsync/gen/adiom/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChunkingServiceName is the fully-qualified name of the ChunkingService service.
	ChunkingServiceName = "adiom.v1.ChunkingService"
	// EmbeddingServiceName is the fully-qualified name of the EmbeddingService service.
	EmbeddingServiceName = "adiom.v1.EmbeddingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChunkingServiceGetSupportedDataTypesProcedure is the fully-qualified name of the
	// ChunkingService's GetSupportedDataTypes RPC.
	ChunkingServiceGetSupportedDataTypesProcedure = "/adiom.v1.ChunkingService/GetSupportedDataTypes"
	// ChunkingServiceGetChunkedProcedure is the fully-qualified name of the ChunkingService's
	// GetChunked RPC.
	ChunkingServiceGetChunkedProcedure = "/adiom.v1.ChunkingService/GetChunked"
	// EmbeddingServiceGetSupportedDataTypesProcedure is the fully-qualified name of the
	// EmbeddingService's GetSupportedDataTypes RPC.
	EmbeddingServiceGetSupportedDataTypesProcedure = "/adiom.v1.EmbeddingService/GetSupportedDataTypes"
	// EmbeddingServiceGetEmbeddingProcedure is the fully-qualified name of the EmbeddingService's
	// GetEmbedding RPC.
	EmbeddingServiceGetEmbeddingProcedure = "/adiom.v1.EmbeddingService/GetEmbedding"
)

// ChunkingServiceClient is a client for the adiom.v1.ChunkingService service.
type ChunkingServiceClient interface {
	GetSupportedDataTypes(context.Context, *connect.Request[v1.GetSupportedDataTypesRequest]) (*connect.Response[v1.GetSupportedDataTypesResponse], error)
	GetChunked(context.Context, *connect.Request[v1.GetChunkedRequest]) (*connect.Response[v1.GetChunkedResponse], error)
}

// NewChunkingServiceClient constructs a client for the adiom.v1.ChunkingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChunkingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChunkingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chunkingServiceMethods := v1.File_adiom_v1_vector_proto.Services().ByName("ChunkingService").Methods()
	return &chunkingServiceClient{
		getSupportedDataTypes: connect.NewClient[v1.GetSupportedDataTypesRequest, v1.GetSupportedDataTypesResponse](
			httpClient,
			baseURL+ChunkingServiceGetSupportedDataTypesProcedure,
			connect.WithSchema(chunkingServiceMethods.ByName("GetSupportedDataTypes")),
			connect.WithClientOptions(opts...),
		),
		getChunked: connect.NewClient[v1.GetChunkedRequest, v1.GetChunkedResponse](
			httpClient,
			baseURL+ChunkingServiceGetChunkedProcedure,
			connect.WithSchema(chunkingServiceMethods.ByName("GetChunked")),
			connect.WithClientOptions(opts...),
		),
	}
}

// chunkingServiceClient implements ChunkingServiceClient.
type chunkingServiceClient struct {
	getSupportedDataTypes *connect.Client[v1.GetSupportedDataTypesRequest, v1.GetSupportedDataTypesResponse]
	getChunked            *connect.Client[v1.GetChunkedRequest, v1.GetChunkedResponse]
}

// GetSupportedDataTypes calls adiom.v1.ChunkingService.GetSupportedDataTypes.
func (c *chunkingServiceClient) GetSupportedDataTypes(ctx context.Context, req *connect.Request[v1.GetSupportedDataTypesRequest]) (*connect.Response[v1.GetSupportedDataTypesResponse], error) {
	return c.getSupportedDataTypes.CallUnary(ctx, req)
}

// GetChunked calls adiom.v1.ChunkingService.GetChunked.
func (c *chunkingServiceClient) GetChunked(ctx context.Context, req *connect.Request[v1.GetChunkedRequest]) (*connect.Response[v1.GetChunkedResponse], error) {
	return c.getChunked.CallUnary(ctx, req)
}

// ChunkingServiceHandler is an implementation of the adiom.v1.ChunkingService service.
type ChunkingServiceHandler interface {
	GetSupportedDataTypes(context.Context, *connect.Request[v1.GetSupportedDataTypesRequest]) (*connect.Response[v1.GetSupportedDataTypesResponse], error)
	GetChunked(context.Context, *connect.Request[v1.GetChunkedRequest]) (*connect.Response[v1.GetChunkedResponse], error)
}

// NewChunkingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChunkingServiceHandler(svc ChunkingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chunkingServiceMethods := v1.File_adiom_v1_vector_proto.Services().ByName("ChunkingService").Methods()
	chunkingServiceGetSupportedDataTypesHandler := connect.NewUnaryHandler(
		ChunkingServiceGetSupportedDataTypesProcedure,
		svc.GetSupportedDataTypes,
		connect.WithSchema(chunkingServiceMethods.ByName("GetSupportedDataTypes")),
		connect.WithHandlerOptions(opts...),
	)
	chunkingServiceGetChunkedHandler := connect.NewUnaryHandler(
		ChunkingServiceGetChunkedProcedure,
		svc.GetChunked,
		connect.WithSchema(chunkingServiceMethods.ByName("GetChunked")),
		connect.WithHandlerOptions(opts...),
	)
	return "/adiom.v1.ChunkingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChunkingServiceGetSupportedDataTypesProcedure:
			chunkingServiceGetSupportedDataTypesHandler.ServeHTTP(w, r)
		case ChunkingServiceGetChunkedProcedure:
			chunkingServiceGetChunkedHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChunkingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChunkingServiceHandler struct{}

func (UnimplementedChunkingServiceHandler) GetSupportedDataTypes(context.Context, *connect.Request[v1.GetSupportedDataTypesRequest]) (*connect.Response[v1.GetSupportedDataTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("adiom.v1.ChunkingService.GetSupportedDataTypes is not implemented"))
}

func (UnimplementedChunkingServiceHandler) GetChunked(context.Context, *connect.Request[v1.GetChunkedRequest]) (*connect.Response[v1.GetChunkedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("adiom.v1.ChunkingService.GetChunked is not implemented"))
}

// EmbeddingServiceClient is a client for the adiom.v1.EmbeddingService service.
type EmbeddingServiceClient interface {
	GetSupportedDataTypes(context.Context, *connect.Request[v1.GetSupportedDataTypesRequest]) (*connect.Response[v1.GetSupportedDataTypesResponse], error)
	GetEmbedding(context.Context, *connect.Request[v1.GetEmbeddingRequest]) (*connect.Response[v1.GetEmbeddingResponse], error)
}

// NewEmbeddingServiceClient constructs a client for the adiom.v1.EmbeddingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEmbeddingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EmbeddingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	embeddingServiceMethods := v1.File_adiom_v1_vector_proto.Services().ByName("EmbeddingService").Methods()
	return &embeddingServiceClient{
		getSupportedDataTypes: connect.NewClient[v1.GetSupportedDataTypesRequest, v1.GetSupportedDataTypesResponse](
			httpClient,
			baseURL+EmbeddingServiceGetSupportedDataTypesProcedure,
			connect.WithSchema(embeddingServiceMethods.ByName("GetSupportedDataTypes")),
			connect.WithClientOptions(opts...),
		),
		getEmbedding: connect.NewClient[v1.GetEmbeddingRequest, v1.GetEmbeddingResponse](
			httpClient,
			baseURL+EmbeddingServiceGetEmbeddingProcedure,
			connect.WithSchema(embeddingServiceMethods.ByName("GetEmbedding")),
			connect.WithClientOptions(opts...),
		),
	}
}

// embeddingServiceClient implements EmbeddingServiceClient.
type embeddingServiceClient struct {
	getSupportedDataTypes *connect.Client[v1.GetSupportedDataTypesRequest, v1.GetSupportedDataTypesResponse]
	getEmbedding          *connect.Client[v1.GetEmbeddingRequest, v1.GetEmbeddingResponse]
}

// GetSupportedDataTypes calls adiom.v1.EmbeddingService.GetSupportedDataTypes.
func (c *embeddingServiceClient) GetSupportedDataTypes(ctx context.Context, req *connect.Request[v1.GetSupportedDataTypesRequest]) (*connect.Response[v1.GetSupportedDataTypesResponse], error) {
	return c.getSupportedDataTypes.CallUnary(ctx, req)
}

// GetEmbedding calls adiom.v1.EmbeddingService.GetEmbedding.
func (c *embeddingServiceClient) GetEmbedding(ctx context.Context, req *connect.Request[v1.GetEmbeddingRequest]) (*connect.Response[v1.GetEmbeddingResponse], error) {
	return c.getEmbedding.CallUnary(ctx, req)
}

// EmbeddingServiceHandler is an implementation of the adiom.v1.EmbeddingService service.
type EmbeddingServiceHandler interface {
	GetSupportedDataTypes(context.Context, *connect.Request[v1.GetSupportedDataTypesRequest]) (*connect.Response[v1.GetSupportedDataTypesResponse], error)
	GetEmbedding(context.Context, *connect.Request[v1.GetEmbeddingRequest]) (*connect.Response[v1.GetEmbeddingResponse], error)
}

// NewEmbeddingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEmbeddingServiceHandler(svc EmbeddingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	embeddingServiceMethods := v1.File_adiom_v1_vector_proto.Services().ByName("EmbeddingService").Methods()
	embeddingServiceGetSupportedDataTypesHandler := connect.NewUnaryHandler(
		EmbeddingServiceGetSupportedDataTypesProcedure,
		svc.GetSupportedDataTypes,
		connect.WithSchema(embeddingServiceMethods.ByName("GetSupportedDataTypes")),
		connect.WithHandlerOptions(opts...),
	)
	embeddingServiceGetEmbeddingHandler := connect.NewUnaryHandler(
		EmbeddingServiceGetEmbeddingProcedure,
		svc.GetEmbedding,
		connect.WithSchema(embeddingServiceMethods.ByName("GetEmbedding")),
		connect.WithHandlerOptions(opts...),
	)
	return "/adiom.v1.EmbeddingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EmbeddingServiceGetSupportedDataTypesProcedure:
			embeddingServiceGetSupportedDataTypesHandler.ServeHTTP(w, r)
		case EmbeddingServiceGetEmbeddingProcedure:
			embeddingServiceGetEmbeddingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEmbeddingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEmbeddingServiceHandler struct{}

func (UnimplementedEmbeddingServiceHandler) GetSupportedDataTypes(context.Context, *connect.Request[v1.GetSupportedDataTypesRequest]) (*connect.Response[v1.GetSupportedDataTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("adiom.v1.EmbeddingService.GetSupportedDataTypes is not implemented"))
}

func (UnimplementedEmbeddingServiceHandler) GetEmbedding(context.Context, *connect.Request[v1.GetEmbeddingRequest]) (*connect.Response[v1.GetEmbeddingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("adiom.v1.EmbeddingService.GetEmbedding is not implemented"))
}
