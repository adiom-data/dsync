name: Build and Release

# Trigger on push to the main branch
on:
  push:
    branches:
      - 'main'  # Adjust this to your main branch name
  workflow_dispatch:

permissions:
  contents: write  # Ensuring the GITHUB_TOKEN has write permissions to contents

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    - name: Build binaries for multiple platforms
      run: |
        platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64")
        for platform in "${platforms[@]}"
        do
          os_arch=(${platform//\// })
          GOOS=${os_arch[0]}
          GOARCH=${os_arch[1]}
          output_name=dsync-$GOOS-$GOARCH
          env GOOS=$GOOS GOARCH=$GOARCH go build -o $output_name
        done
    - name: Create a README with instructions
      run: echo "# dsync Binary" > README.md
    - name: Archive binaries and README
      run: |
        zip dsync.zip dsync-* README.md
    - name: Get the latest tag name and increment it
      id: get_tag_name
      run: |
        TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag found: $TAG"
        if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          IFS='.' read -r -a parts <<< "${TAG:1}"
          new_version="v${parts[0]}.${parts[1]}.$((parts[2]+1))"
        else
          new_version="v0.0.1"
        fi
        echo "NEW_TAG=$new_version" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        release_name: Release ${{ env.NEW_TAG }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dsync.zip
        asset_name: dsync.zip
        asset_content_type: application/zip
    - name: Create new tag
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag ${{ env.NEW_TAG }}
        git push origin ${{ env.NEW_TAG }}
