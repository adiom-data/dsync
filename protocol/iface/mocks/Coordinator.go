// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	iface "github.com/adiom-data/dsync/protocol/iface"
	mock "github.com/stretchr/testify/mock"
)

// Coordinator is an autogenerated mock type for the Coordinator type
type Coordinator struct {
	mock.Mock
}

// DelistConnector provides a mock function with given fields: _a0
func (_m *Coordinator) DelistConnector(_a0 iface.ConnectorID) {
	_m.Called(_a0)
}

// FlowDestroy provides a mock function with given fields: _a0
func (_m *Coordinator) FlowDestroy(_a0 iface.FlowID) {
	_m.Called(_a0)
}

// FlowGetOrCreate provides a mock function with given fields: _a0
func (_m *Coordinator) FlowGetOrCreate(_a0 iface.FlowOptions) (iface.FlowID, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FlowGetOrCreate")
	}

	var r0 iface.FlowID
	var r1 error
	if rf, ok := ret.Get(0).(func(iface.FlowOptions) (iface.FlowID, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(iface.FlowOptions) iface.FlowID); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(iface.FlowID)
	}

	if rf, ok := ret.Get(1).(func(iface.FlowOptions) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlowStart provides a mock function with given fields: _a0
func (_m *Coordinator) FlowStart(_a0 iface.FlowID) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FlowStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlowStop provides a mock function with given fields: _a0
func (_m *Coordinator) FlowStop(_a0 iface.FlowID) {
	_m.Called(_a0)
}

// GetConnectors provides a mock function with no fields
func (_m *Coordinator) GetConnectors() []iface.ConnectorDetails {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnectors")
	}

	var r0 []iface.ConnectorDetails
	if rf, ok := ret.Get(0).(func() []iface.ConnectorDetails); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iface.ConnectorDetails)
		}
	}

	return r0
}

// GetFlowIntegrityStatus provides a mock function with given fields: _a0
func (_m *Coordinator) GetFlowIntegrityStatus(_a0 iface.FlowID) ([]iface.FlowIntegrityStatus, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFlowIntegrityStatus")
	}

	var r0 []iface.FlowIntegrityStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(iface.FlowID) ([]iface.FlowIntegrityStatus, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(iface.FlowID) []iface.FlowIntegrityStatus); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]iface.FlowIntegrityStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(iface.FlowID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlowStatus provides a mock function with given fields: _a0
func (_m *Coordinator) GetFlowStatus(_a0 iface.FlowID) (iface.FlowStatus, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFlowStatus")
	}

	var r0 iface.FlowStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(iface.FlowID) (iface.FlowStatus, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(iface.FlowID) iface.FlowStatus); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(iface.FlowStatus)
	}

	if rf, ok := ret.Get(1).(func(iface.FlowID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyDone provides a mock function with given fields: flowId, conn
func (_m *Coordinator) NotifyDone(flowId iface.FlowID, conn iface.ConnectorID) error {
	ret := _m.Called(flowId, conn)

	if len(ret) == 0 {
		panic("no return value specified for NotifyDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID, iface.ConnectorID) error); ok {
		r0 = rf(flowId, conn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotifyError provides a mock function with given fields: err
func (_m *Coordinator) NotifyError(err error) {
	_m.Called(err)
}

// NotifyTaskDone provides a mock function with given fields: flowId, conn, taskId, taskData
func (_m *Coordinator) NotifyTaskDone(flowId iface.FlowID, conn iface.ConnectorID, taskId iface.ReadPlanTaskID, taskData *iface.TaskDoneMeta) error {
	ret := _m.Called(flowId, conn, taskId, taskData)

	if len(ret) == 0 {
		panic("no return value specified for NotifyTaskDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID, iface.ConnectorID, iface.ReadPlanTaskID, *iface.TaskDoneMeta) error); ok {
		r0 = rf(flowId, conn, taskId, taskData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PerformFlowIntegrityCheck provides a mock function with given fields: _a0, _a1, _a2
func (_m *Coordinator) PerformFlowIntegrityCheck(_a0 context.Context, _a1 iface.FlowID, _a2 iface.IntegrityCheckOptions) (iface.FlowDataIntegrityCheckResult, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for PerformFlowIntegrityCheck")
	}

	var r0 iface.FlowDataIntegrityCheckResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, iface.FlowID, iface.IntegrityCheckOptions) (iface.FlowDataIntegrityCheckResult, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, iface.FlowID, iface.IntegrityCheckOptions) iface.FlowDataIntegrityCheckResult); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(iface.FlowDataIntegrityCheckResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, iface.FlowID, iface.IntegrityCheckOptions) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostReadPlanningResult provides a mock function with given fields: flowId, conn, res
func (_m *Coordinator) PostReadPlanningResult(flowId iface.FlowID, conn iface.ConnectorID, res iface.ConnectorReadPlanResult) error {
	ret := _m.Called(flowId, conn, res)

	if len(ret) == 0 {
		panic("no return value specified for PostReadPlanningResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID, iface.ConnectorID, iface.ConnectorReadPlanResult) error); ok {
		r0 = rf(flowId, conn, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterConnector provides a mock function with given fields: details, cep
func (_m *Coordinator) RegisterConnector(details iface.ConnectorDetails, cep iface.ConnectorICoordinatorSignal) (iface.ConnectorID, error) {
	ret := _m.Called(details, cep)

	if len(ret) == 0 {
		panic("no return value specified for RegisterConnector")
	}

	var r0 iface.ConnectorID
	var r1 error
	if rf, ok := ret.Get(0).(func(iface.ConnectorDetails, iface.ConnectorICoordinatorSignal) (iface.ConnectorID, error)); ok {
		return rf(details, cep)
	}
	if rf, ok := ret.Get(0).(func(iface.ConnectorDetails, iface.ConnectorICoordinatorSignal) iface.ConnectorID); ok {
		r0 = rf(details, cep)
	} else {
		r0 = ret.Get(0).(iface.ConnectorID)
	}

	if rf, ok := ret.Get(1).(func(iface.ConnectorDetails, iface.ConnectorICoordinatorSignal) error); ok {
		r1 = rf(details, cep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Setup provides a mock function with given fields: ctx, t, s
func (_m *Coordinator) Setup(ctx context.Context, t iface.Transport, s iface.Statestore) {
	_m.Called(ctx, t, s)
}

// Teardown provides a mock function with no fields
func (_m *Coordinator) Teardown() {
	_m.Called()
}

// UpdateCDCResumeToken provides a mock function with given fields: flowId, conn, resumeToken
func (_m *Coordinator) UpdateCDCResumeToken(flowId iface.FlowID, conn iface.ConnectorID, resumeToken []byte) error {
	ret := _m.Called(flowId, conn, resumeToken)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCDCResumeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID, iface.ConnectorID, []byte) error); ok {
		r0 = rf(flowId, conn, resumeToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConnectorStatus provides a mock function with given fields: flowId, conn, status
func (_m *Coordinator) UpdateConnectorStatus(flowId iface.FlowID, conn iface.ConnectorID, status iface.ConnectorStatus) error {
	ret := _m.Called(flowId, conn, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectorStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID, iface.ConnectorID, iface.ConnectorStatus) error); ok {
		r0 = rf(flowId, conn, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForFlowDone provides a mock function with given fields: _a0
func (_m *Coordinator) WaitForFlowDone(_a0 iface.FlowID) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WaitForFlowDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(iface.FlowID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCoordinator creates a new instance of Coordinator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoordinator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Coordinator {
	mock := &Coordinator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
