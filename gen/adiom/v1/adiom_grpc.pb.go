// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: adiom/v1/adiom.proto

package adiomv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectorService_GetInfo_FullMethodName              = "/adiom.v1.ConnectorService/GetInfo"
	ConnectorService_GetNamespaceMetadata_FullMethodName = "/adiom.v1.ConnectorService/GetNamespaceMetadata"
	ConnectorService_WriteData_FullMethodName            = "/adiom.v1.ConnectorService/WriteData"
	ConnectorService_WriteUpdates_FullMethodName         = "/adiom.v1.ConnectorService/WriteUpdates"
	ConnectorService_GeneratePlan_FullMethodName         = "/adiom.v1.ConnectorService/GeneratePlan"
	ConnectorService_ListData_FullMethodName             = "/adiom.v1.ConnectorService/ListData"
	ConnectorService_StreamUpdates_FullMethodName        = "/adiom.v1.ConnectorService/StreamUpdates"
	ConnectorService_StreamLSN_FullMethodName            = "/adiom.v1.ConnectorService/StreamLSN"
)

// ConnectorServiceClient is the client API for ConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorServiceClient interface {
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	GetNamespaceMetadata(ctx context.Context, in *GetNamespaceMetadataRequest, opts ...grpc.CallOption) (*GetNamespaceMetadataResponse, error)
	// Sink
	WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*WriteDataResponse, error)
	WriteUpdates(ctx context.Context, in *WriteUpdatesRequest, opts ...grpc.CallOption) (*WriteUpdatesResponse, error)
	// Source
	GeneratePlan(ctx context.Context, in *GeneratePlanRequest, opts ...grpc.CallOption) (*GeneratePlanResponse, error)
	ListData(ctx context.Context, in *ListDataRequest, opts ...grpc.CallOption) (*ListDataResponse, error)
	StreamUpdates(ctx context.Context, in *StreamUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamUpdatesResponse], error)
	StreamLSN(ctx context.Context, in *StreamLSNRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamLSNResponse], error)
}

type connectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorServiceClient(cc grpc.ClientConnInterface) ConnectorServiceClient {
	return &connectorServiceClient{cc}
}

func (c *connectorServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, ConnectorService_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) GetNamespaceMetadata(ctx context.Context, in *GetNamespaceMetadataRequest, opts ...grpc.CallOption) (*GetNamespaceMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamespaceMetadataResponse)
	err := c.cc.Invoke(ctx, ConnectorService_GetNamespaceMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) WriteData(ctx context.Context, in *WriteDataRequest, opts ...grpc.CallOption) (*WriteDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteDataResponse)
	err := c.cc.Invoke(ctx, ConnectorService_WriteData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) WriteUpdates(ctx context.Context, in *WriteUpdatesRequest, opts ...grpc.CallOption) (*WriteUpdatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteUpdatesResponse)
	err := c.cc.Invoke(ctx, ConnectorService_WriteUpdates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) GeneratePlan(ctx context.Context, in *GeneratePlanRequest, opts ...grpc.CallOption) (*GeneratePlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneratePlanResponse)
	err := c.cc.Invoke(ctx, ConnectorService_GeneratePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListData(ctx context.Context, in *ListDataRequest, opts ...grpc.CallOption) (*ListDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDataResponse)
	err := c.cc.Invoke(ctx, ConnectorService_ListData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) StreamUpdates(ctx context.Context, in *StreamUpdatesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamUpdatesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConnectorService_ServiceDesc.Streams[0], ConnectorService_StreamUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamUpdatesRequest, StreamUpdatesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConnectorService_StreamUpdatesClient = grpc.ServerStreamingClient[StreamUpdatesResponse]

func (c *connectorServiceClient) StreamLSN(ctx context.Context, in *StreamLSNRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamLSNResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConnectorService_ServiceDesc.Streams[1], ConnectorService_StreamLSN_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamLSNRequest, StreamLSNResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConnectorService_StreamLSNClient = grpc.ServerStreamingClient[StreamLSNResponse]

// ConnectorServiceServer is the server API for ConnectorService service.
// All implementations must embed UnimplementedConnectorServiceServer
// for forward compatibility.
type ConnectorServiceServer interface {
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	GetNamespaceMetadata(context.Context, *GetNamespaceMetadataRequest) (*GetNamespaceMetadataResponse, error)
	// Sink
	WriteData(context.Context, *WriteDataRequest) (*WriteDataResponse, error)
	WriteUpdates(context.Context, *WriteUpdatesRequest) (*WriteUpdatesResponse, error)
	// Source
	GeneratePlan(context.Context, *GeneratePlanRequest) (*GeneratePlanResponse, error)
	ListData(context.Context, *ListDataRequest) (*ListDataResponse, error)
	StreamUpdates(*StreamUpdatesRequest, grpc.ServerStreamingServer[StreamUpdatesResponse]) error
	StreamLSN(*StreamLSNRequest, grpc.ServerStreamingServer[StreamLSNResponse]) error
	mustEmbedUnimplementedConnectorServiceServer()
}

// UnimplementedConnectorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectorServiceServer struct{}

func (UnimplementedConnectorServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedConnectorServiceServer) GetNamespaceMetadata(context.Context, *GetNamespaceMetadataRequest) (*GetNamespaceMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceMetadata not implemented")
}
func (UnimplementedConnectorServiceServer) WriteData(context.Context, *WriteDataRequest) (*WriteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteData not implemented")
}
func (UnimplementedConnectorServiceServer) WriteUpdates(context.Context, *WriteUpdatesRequest) (*WriteUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteUpdates not implemented")
}
func (UnimplementedConnectorServiceServer) GeneratePlan(context.Context, *GeneratePlanRequest) (*GeneratePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePlan not implemented")
}
func (UnimplementedConnectorServiceServer) ListData(context.Context, *ListDataRequest) (*ListDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListData not implemented")
}
func (UnimplementedConnectorServiceServer) StreamUpdates(*StreamUpdatesRequest, grpc.ServerStreamingServer[StreamUpdatesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (UnimplementedConnectorServiceServer) StreamLSN(*StreamLSNRequest, grpc.ServerStreamingServer[StreamLSNResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLSN not implemented")
}
func (UnimplementedConnectorServiceServer) mustEmbedUnimplementedConnectorServiceServer() {}
func (UnimplementedConnectorServiceServer) testEmbeddedByValue()                          {}

// UnsafeConnectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServiceServer will
// result in compilation errors.
type UnsafeConnectorServiceServer interface {
	mustEmbedUnimplementedConnectorServiceServer()
}

func RegisterConnectorServiceServer(s grpc.ServiceRegistrar, srv ConnectorServiceServer) {
	// If the following call pancis, it indicates UnimplementedConnectorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectorService_ServiceDesc, srv)
}

func _ConnectorService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_GetNamespaceMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetNamespaceMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_GetNamespaceMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetNamespaceMetadata(ctx, req.(*GetNamespaceMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_WriteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).WriteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_WriteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).WriteData(ctx, req.(*WriteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_WriteUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).WriteUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_WriteUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).WriteUpdates(ctx, req.(*WriteUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_GeneratePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GeneratePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_GeneratePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GeneratePlan(ctx, req.(*GeneratePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_ListData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListData(ctx, req.(*ListDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServiceServer).StreamUpdates(m, &grpc.GenericServerStream[StreamUpdatesRequest, StreamUpdatesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConnectorService_StreamUpdatesServer = grpc.ServerStreamingServer[StreamUpdatesResponse]

func _ConnectorService_StreamLSN_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLSNRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectorServiceServer).StreamLSN(m, &grpc.GenericServerStream[StreamLSNRequest, StreamLSNResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConnectorService_StreamLSNServer = grpc.ServerStreamingServer[StreamLSNResponse]

// ConnectorService_ServiceDesc is the grpc.ServiceDesc for ConnectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adiom.v1.ConnectorService",
	HandlerType: (*ConnectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _ConnectorService_GetInfo_Handler,
		},
		{
			MethodName: "GetNamespaceMetadata",
			Handler:    _ConnectorService_GetNamespaceMetadata_Handler,
		},
		{
			MethodName: "WriteData",
			Handler:    _ConnectorService_WriteData_Handler,
		},
		{
			MethodName: "WriteUpdates",
			Handler:    _ConnectorService_WriteUpdates_Handler,
		},
		{
			MethodName: "GeneratePlan",
			Handler:    _ConnectorService_GeneratePlan_Handler,
		},
		{
			MethodName: "ListData",
			Handler:    _ConnectorService_ListData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _ConnectorService_StreamUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLSN",
			Handler:       _ConnectorService_StreamLSN_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "adiom/v1/adiom.proto",
}

const (
	TransformService_GetTransformInfo_FullMethodName   = "/adiom.v1.TransformService/GetTransformInfo"
	TransformService_GetTransform_FullMethodName       = "/adiom.v1.TransformService/GetTransform"
	TransformService_GetFanOutTransform_FullMethodName = "/adiom.v1.TransformService/GetFanOutTransform"
)

// TransformServiceClient is the client API for TransformService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformServiceClient interface {
	GetTransformInfo(ctx context.Context, in *GetTransformInfoRequest, opts ...grpc.CallOption) (*GetTransformInfoResponse, error)
	GetTransform(ctx context.Context, in *GetTransformRequest, opts ...grpc.CallOption) (*GetTransformResponse, error)
	GetFanOutTransform(ctx context.Context, in *GetFanOutTransformRequest, opts ...grpc.CallOption) (*GetFanOutTransformResponse, error)
}

type transformServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformServiceClient(cc grpc.ClientConnInterface) TransformServiceClient {
	return &transformServiceClient{cc}
}

func (c *transformServiceClient) GetTransformInfo(ctx context.Context, in *GetTransformInfoRequest, opts ...grpc.CallOption) (*GetTransformInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransformInfoResponse)
	err := c.cc.Invoke(ctx, TransformService_GetTransformInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformServiceClient) GetTransform(ctx context.Context, in *GetTransformRequest, opts ...grpc.CallOption) (*GetTransformResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransformResponse)
	err := c.cc.Invoke(ctx, TransformService_GetTransform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformServiceClient) GetFanOutTransform(ctx context.Context, in *GetFanOutTransformRequest, opts ...grpc.CallOption) (*GetFanOutTransformResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFanOutTransformResponse)
	err := c.cc.Invoke(ctx, TransformService_GetFanOutTransform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformServiceServer is the server API for TransformService service.
// All implementations must embed UnimplementedTransformServiceServer
// for forward compatibility.
type TransformServiceServer interface {
	GetTransformInfo(context.Context, *GetTransformInfoRequest) (*GetTransformInfoResponse, error)
	GetTransform(context.Context, *GetTransformRequest) (*GetTransformResponse, error)
	GetFanOutTransform(context.Context, *GetFanOutTransformRequest) (*GetFanOutTransformResponse, error)
	mustEmbedUnimplementedTransformServiceServer()
}

// UnimplementedTransformServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransformServiceServer struct{}

func (UnimplementedTransformServiceServer) GetTransformInfo(context.Context, *GetTransformInfoRequest) (*GetTransformInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransformInfo not implemented")
}
func (UnimplementedTransformServiceServer) GetTransform(context.Context, *GetTransformRequest) (*GetTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransform not implemented")
}
func (UnimplementedTransformServiceServer) GetFanOutTransform(context.Context, *GetFanOutTransformRequest) (*GetFanOutTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFanOutTransform not implemented")
}
func (UnimplementedTransformServiceServer) mustEmbedUnimplementedTransformServiceServer() {}
func (UnimplementedTransformServiceServer) testEmbeddedByValue()                          {}

// UnsafeTransformServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformServiceServer will
// result in compilation errors.
type UnsafeTransformServiceServer interface {
	mustEmbedUnimplementedTransformServiceServer()
}

func RegisterTransformServiceServer(s grpc.ServiceRegistrar, srv TransformServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransformServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransformService_ServiceDesc, srv)
}

func _TransformService_GetTransformInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransformInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServiceServer).GetTransformInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransformService_GetTransformInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServiceServer).GetTransformInfo(ctx, req.(*GetTransformInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransformService_GetTransform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServiceServer).GetTransform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransformService_GetTransform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServiceServer).GetTransform(ctx, req.(*GetTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransformService_GetFanOutTransform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFanOutTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformServiceServer).GetFanOutTransform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransformService_GetFanOutTransform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformServiceServer).GetFanOutTransform(ctx, req.(*GetFanOutTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransformService_ServiceDesc is the grpc.ServiceDesc for TransformService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransformService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adiom.v1.TransformService",
	HandlerType: (*TransformServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransformInfo",
			Handler:    _TransformService_GetTransformInfo_Handler,
		},
		{
			MethodName: "GetTransform",
			Handler:    _TransformService_GetTransform_Handler,
		},
		{
			MethodName: "GetFanOutTransform",
			Handler:    _TransformService_GetFanOutTransform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adiom/v1/adiom.proto",
}
