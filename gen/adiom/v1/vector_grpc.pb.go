// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: adiom/v1/vector.proto

package adiomv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChunkingService_GetSupportedDataTypes_FullMethodName = "/adiom.v1.ChunkingService/GetSupportedDataTypes"
	ChunkingService_GetChunked_FullMethodName            = "/adiom.v1.ChunkingService/GetChunked"
)

// ChunkingServiceClient is the client API for ChunkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkingServiceClient interface {
	GetSupportedDataTypes(ctx context.Context, in *GetSupportedDataTypesRequest, opts ...grpc.CallOption) (*GetSupportedDataTypesResponse, error)
	GetChunked(ctx context.Context, in *GetChunkedRequest, opts ...grpc.CallOption) (*GetChunkedResponse, error)
}

type chunkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkingServiceClient(cc grpc.ClientConnInterface) ChunkingServiceClient {
	return &chunkingServiceClient{cc}
}

func (c *chunkingServiceClient) GetSupportedDataTypes(ctx context.Context, in *GetSupportedDataTypesRequest, opts ...grpc.CallOption) (*GetSupportedDataTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupportedDataTypesResponse)
	err := c.cc.Invoke(ctx, ChunkingService_GetSupportedDataTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkingServiceClient) GetChunked(ctx context.Context, in *GetChunkedRequest, opts ...grpc.CallOption) (*GetChunkedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkedResponse)
	err := c.cc.Invoke(ctx, ChunkingService_GetChunked_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkingServiceServer is the server API for ChunkingService service.
// All implementations must embed UnimplementedChunkingServiceServer
// for forward compatibility.
type ChunkingServiceServer interface {
	GetSupportedDataTypes(context.Context, *GetSupportedDataTypesRequest) (*GetSupportedDataTypesResponse, error)
	GetChunked(context.Context, *GetChunkedRequest) (*GetChunkedResponse, error)
	mustEmbedUnimplementedChunkingServiceServer()
}

// UnimplementedChunkingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChunkingServiceServer struct{}

func (UnimplementedChunkingServiceServer) GetSupportedDataTypes(context.Context, *GetSupportedDataTypesRequest) (*GetSupportedDataTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedDataTypes not implemented")
}
func (UnimplementedChunkingServiceServer) GetChunked(context.Context, *GetChunkedRequest) (*GetChunkedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunked not implemented")
}
func (UnimplementedChunkingServiceServer) mustEmbedUnimplementedChunkingServiceServer() {}
func (UnimplementedChunkingServiceServer) testEmbeddedByValue()                         {}

// UnsafeChunkingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkingServiceServer will
// result in compilation errors.
type UnsafeChunkingServiceServer interface {
	mustEmbedUnimplementedChunkingServiceServer()
}

func RegisterChunkingServiceServer(s grpc.ServiceRegistrar, srv ChunkingServiceServer) {
	// If the following call pancis, it indicates UnimplementedChunkingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChunkingService_ServiceDesc, srv)
}

func _ChunkingService_GetSupportedDataTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedDataTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkingServiceServer).GetSupportedDataTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkingService_GetSupportedDataTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkingServiceServer).GetSupportedDataTypes(ctx, req.(*GetSupportedDataTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkingService_GetChunked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkingServiceServer).GetChunked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChunkingService_GetChunked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkingServiceServer).GetChunked(ctx, req.(*GetChunkedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChunkingService_ServiceDesc is the grpc.ServiceDesc for ChunkingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChunkingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adiom.v1.ChunkingService",
	HandlerType: (*ChunkingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedDataTypes",
			Handler:    _ChunkingService_GetSupportedDataTypes_Handler,
		},
		{
			MethodName: "GetChunked",
			Handler:    _ChunkingService_GetChunked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adiom/v1/vector.proto",
}

const (
	EmbeddingService_GetSupportedDataTypes_FullMethodName = "/adiom.v1.EmbeddingService/GetSupportedDataTypes"
	EmbeddingService_GetEmbedding_FullMethodName          = "/adiom.v1.EmbeddingService/GetEmbedding"
)

// EmbeddingServiceClient is the client API for EmbeddingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbeddingServiceClient interface {
	GetSupportedDataTypes(ctx context.Context, in *GetSupportedDataTypesRequest, opts ...grpc.CallOption) (*GetSupportedDataTypesResponse, error)
	GetEmbedding(ctx context.Context, in *GetEmbeddingRequest, opts ...grpc.CallOption) (*GetEmbeddingResponse, error)
}

type embeddingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbeddingServiceClient(cc grpc.ClientConnInterface) EmbeddingServiceClient {
	return &embeddingServiceClient{cc}
}

func (c *embeddingServiceClient) GetSupportedDataTypes(ctx context.Context, in *GetSupportedDataTypesRequest, opts ...grpc.CallOption) (*GetSupportedDataTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSupportedDataTypesResponse)
	err := c.cc.Invoke(ctx, EmbeddingService_GetSupportedDataTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embeddingServiceClient) GetEmbedding(ctx context.Context, in *GetEmbeddingRequest, opts ...grpc.CallOption) (*GetEmbeddingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmbeddingResponse)
	err := c.cc.Invoke(ctx, EmbeddingService_GetEmbedding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbeddingServiceServer is the server API for EmbeddingService service.
// All implementations must embed UnimplementedEmbeddingServiceServer
// for forward compatibility.
type EmbeddingServiceServer interface {
	GetSupportedDataTypes(context.Context, *GetSupportedDataTypesRequest) (*GetSupportedDataTypesResponse, error)
	GetEmbedding(context.Context, *GetEmbeddingRequest) (*GetEmbeddingResponse, error)
	mustEmbedUnimplementedEmbeddingServiceServer()
}

// UnimplementedEmbeddingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmbeddingServiceServer struct{}

func (UnimplementedEmbeddingServiceServer) GetSupportedDataTypes(context.Context, *GetSupportedDataTypesRequest) (*GetSupportedDataTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedDataTypes not implemented")
}
func (UnimplementedEmbeddingServiceServer) GetEmbedding(context.Context, *GetEmbeddingRequest) (*GetEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmbedding not implemented")
}
func (UnimplementedEmbeddingServiceServer) mustEmbedUnimplementedEmbeddingServiceServer() {}
func (UnimplementedEmbeddingServiceServer) testEmbeddedByValue()                          {}

// UnsafeEmbeddingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbeddingServiceServer will
// result in compilation errors.
type UnsafeEmbeddingServiceServer interface {
	mustEmbedUnimplementedEmbeddingServiceServer()
}

func RegisterEmbeddingServiceServer(s grpc.ServiceRegistrar, srv EmbeddingServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmbeddingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmbeddingService_ServiceDesc, srv)
}

func _EmbeddingService_GetSupportedDataTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSupportedDataTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServiceServer).GetSupportedDataTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbeddingService_GetSupportedDataTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServiceServer).GetSupportedDataTypes(ctx, req.(*GetSupportedDataTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbeddingService_GetEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbeddingServiceServer).GetEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbeddingService_GetEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbeddingServiceServer).GetEmbedding(ctx, req.(*GetEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmbeddingService_ServiceDesc is the grpc.ServiceDesc for EmbeddingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbeddingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adiom.v1.EmbeddingService",
	HandlerType: (*EmbeddingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedDataTypes",
			Handler:    _EmbeddingService_GetSupportedDataTypes_Handler,
		},
		{
			MethodName: "GetEmbedding",
			Handler:    _EmbeddingService_GetEmbedding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adiom/v1/vector.proto",
}
