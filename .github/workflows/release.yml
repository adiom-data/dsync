name: Build and Release

# Trigger on a new tag
on:
  push:
    # Pattern matched against refs/tags
    tags:        
      - '*'           # Push events to every tag not containing /

permissions:
  contents: write  # Ensuring the GITHUB_TOKEN has write permissions to contents

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22
    - name: Build binaries for multiple platforms
      run: |
        platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64")
        for platform in "${platforms[@]}"
        do
          os_arch=(${platform//\// })
          GOOS=${os_arch[0]}
          GOARCH=${os_arch[1]}
          output_name=dsync-$GOOS-$GOARCH
          env GOOS=$GOOS GOARCH=$GOARCH go build -o $output_name
        done
    - name: Create a README with instructions
      run: echo "# dsync Binary" > README.md
    - name: Archive binaries and README
      run: |
        zip dsync.zip dsync-* README.md
    - name: Get the tag name
      id: get_tag_name
      run: |
        echo "RELEASE_TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: Release ${{ env.RELEASE_TAG }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dsync.zip
        asset_name: dsync.zip
        asset_content_type: application/zip
